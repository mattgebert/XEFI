[build-system]
    requires = [
        "setuptools>=60",
        "setuptools-scm>=8.0",
        "pip >= 25.1", # Supports group dependency installs.
    ]
    build-backend = "setuptools.build_meta"


[project]
    # Project information
    name = "XEFI"
    version = "0.0.0"
    description = "Calculations for X-ray Electric Field Intensities using the Parratt recursive algorithm."
    readme = "README.rst"
    license = {file = "LICENSE"}
    keywords = ["X-ray", "Waveguiding", "Parratt", "Electric", "XEFI", "Intensity", "Field", "Intensity"]
    authors = [
        {name = "Matthew Gebert", email="matthew.gebert@monash.edu"},
        ]
    maintainers = [
        {name = "Matthew Gebert", email="matthew.gebert@monash.edu"},
    ]

    # Project compatibility:
    requires-python = ">=3.12"
    dependencies = [
        "numpy",
        "scipy",
        "matplotlib",
    ]

[dependency-groups]
dev = [
    {include-group = "docs"}, # Include documentation dependencies in dev
    "pre-commit",
    "pytest",
    "python-semantic-release",
    "commitizen",
    "commitlint",
    "black",
    # "plotly",
]

docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "numpydoc",
]

## Linting
# Ruff
[tool.ruff] # Same as Black formatting.
line-length = 88
indent-width = 4

[tool.ruff.format] # Same as Black formatting.
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# NumpyDoc
[tool.numpydoc_validation]
    checks = [
        "all",   # report on all checks, except the below
        "EX01",
        "SA01",
        "ES01",
        "GL08", # TODO: ignore docstring check until numpydoc 1.9.0 is released (where constructors are supported).
        "PR02", # TODO: ignore parameter check until numpydoc 1.9.0 is released (where properties setter methods are supported).
    ]

    exclude = [
        '^tests*$',
        '.*/gui/.*',
    ]

    override_SS05 = [
        "^Process",
        "^Nexafs",
        "^Xanes",
        "^Xas",
        "",
    ]


## Semantic Versioning / Conventional Commits
# Commitizen
[tool.commitizen]
name = "cz_conventional_commits"
version_files = ["pyproject.toml:project.version"]
# version_provider = "pep621" #equivalent to version_files description

# Commitlint


# Python-Sem-Ver
[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
# build_command = "python -m build --sdist --wheel ."
commit_parser = "conventional"
build_command = "pip install uv && uv build --sdist --wheel . --out-dir dist"
commit_message = """
chore(release): Release `core@{version}` [skip ci]
Automatically generated by python-semantic-release
"""
allow_zero_version = true

[tool.semantic_release.branches.beta]
# Matches branches with the prefixes 'feat/', 'fix/', or 'perf/'.
match = "^(feat|fix|perf)/.+"
prerelease = true
prerelease_token = "beta"

[tool.semantic_release.changelog.default_templates]
changelog_file = "docs/CHANGELOG.rst"
output_format = "rst" # or "md" for Markdown format

[tool.semantic_release.changelog]
# Recommended patterns for conventional commits parser that is scope aware
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''',
]

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
# other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
# allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
# default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true


#######################################################
#############  Sphinx Doc configurations  #############
#######################################################

[tool.sphinx-pyproject]
html_theme = "pydata_sphinx_theme"

[tool.sphinx-pyproject.html_theme_options]
    # ...
    navbar_start = ["navbar-logo"]
    navbar_center = ["navbar-nav"]
    navbar_end = ["theme-switcher", "navbar-icon-links"]
    navbar_persistent = ["search-button"]
    navbar_align = "content"
    show_nav_level = 2
    navigation_depth = 4
    # ...
    secondary_sidebar_items = ["page-toc", "edit-this-page", "sourcelink"]
    # ...
    article_footer_items = []
    #...
    footer_start = ["copyright", "sphinx-version"]
    footer_end = ["theme-version"]
    #...
    show_prev_next = true

# Array item:
[[tool.sphinx-pyproject.html_theme_options.icon_links]]
    name = "GitHub"
    url = "https://github.com/xraysoftmat/XEFI"
    icon = "fab fa-github-square"
    type = "fontawesome"

[tool.sphinx-pyproject.html_sidebars]
  "**" = []

[tool.sphinx-pyproject.html_context]
    default_mode = "light"
    default_dark_mode = false
    default_language = "en"
    default_version = "latest"
    display_github = true
    github_user = "xraysoftmat"
    github_repo = "XEFI"
    github_version = "main"
    doc_path = "docs"

# Esbonio Sphinx extension for VS Code integration - https://docs.esbon.io
[tool.esbonio.sphinx]
    buildCommand = ["sphinx-build", "-M", "dirhtml", "./docs", "./docs/_build"]
    pythonCommand = ["${venv:XEFI}"]
